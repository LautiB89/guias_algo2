Un arreglo con tamaño potencia de 2 es mas a la izquierda si:
- La suma de los elementos de la mitad izquierda superan los de la mitad derecha.
- Cada una de las mitades es a su vez “mas a la izquierda”.

Ejemplo: [8,6,7,4,5,1,3,2] es mas izq
8+6+7+4 > 5+1+3+2 &&
8+6 > 7+4 && 5+1 > 3+2 &&
8 > 6 && 7 > 4 && 5 > 1 && 3 > 2

esMasIzq(in A: arreglo(nat)) → res: bool
	
	res ← esMasIzqAux(A, 0, tamaño(A)-1).masIzq


esMasIzqAux(in A: arreglo(nat), in desde: nat,in hasta: nat) → res: tupla(masIzq: bool, suma: nat)
	
	if hasta-desde=1 then //O(n)
		res ← tupla(A[hasta] < A[desde], A[hasta]+A[desde]) //O(1)
	else
		mitadIzq ← esMasIzqAux(A, desde, (desde+hasta)/2) //T(n/2)
		mitadDer ← esMasIzqAux(A, (desde+hasta+1)/2, hasta) //T(n/2)
		
		res.masIzq = mitadIzq.masIzq ∧ mitadDer.masIzq ∧ mitadIzq.suma > mitadDer.suma
		res.suma = mitadIzq.suma + mitadDer.suma
	endif


Calculo la complejidad:
T(n) = 2 T(n/2) = 2 (2 T(n/4)) = 4T(n/4) = 8 T(n/8) = ...
	 = 2ᵏ T(n/2ᴷ)
Quiero ver cuanto vale el tiempo hasta que n/2ᵏ = 1 ⇒ k = log n
T(n) = 2^(log n) T(n/2^(log n)) = n T(n/n) = n T(1) = n
Finalmente T(n) = n ⇒ T(n) ∈ O(n) ⊂ O(n²)
