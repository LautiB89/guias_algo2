ordenarAVL(in/out A: arreglo(nat))
	ab: diccAVL⟨nat,nat⟩ = CrearArbolAVL()
	para i = 0..tamaño(A):
		si definido(A[i], ab): //O(logd)
			e ← obtener(A[i], ab)
			definir(A[i], e.reps + 1, ab)
		si no
			definir(A[i], 1, ab)
		fin si

	fin para //hago n iteraciones ⟹ O(n*log d) 
	

	//Hago un Inorder medio casero
	lista(tupla(elem: nat, reps: nat)) 
		B ← CrearLista() //O(1)

	d = Claves(ab) //conjunto avl O(d)
	while ¬∅?(d):
		m ← Min(d) //O(logd)
		AgregarAtras(B, ⟨m, obtener(m, ab)) //O(1) + O(logd) = O(logd)
		borrar(m, ab) //O(log d)
	end while

	A' ← ListaAArreglo(B) //O(d)
	A ← Descompactar(A') //O(n)

Complejidad final: O(n * log(d))
