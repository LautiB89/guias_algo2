casiSort: 
Dado un arreglo A[1...n] de n elementos, 
ordena n/2 elementos arbitrarios poniendolos a la mitad izq del arreglo A[1...n/2]. 
Los elementos no ordenados de A se colocan en la mitad derecha A[n/2+1...n].

ordenar(in/out A:arreglo(nat))
	n ← tamaño(A) //O(n)

	if n = 2 then
		if A[0] > A[1] then
			swap(A[0], A[1])
		fi
	else if n > 2 then
		casiSort(A) //Θ(n)
		B ← Copiar(Subarreglo(n/2+1,n)) //O(n/2)
		ordenar(B) //T(n/2)
		
		for i ← n/2+1 to n:
			A[i] ← B[i - (n/2+1)] //O(1)
		end for //n/2 iteraciones
		//O(n)
	fi

2.
T(n) = T(n/2)  +  1c * n
	 = T(n/4)  +  2c * n = ...
	 = T(n/2ᴷ) +  kc * n

Quiero hacer la recursion hasta llegar al caso base, n/2ᵏ=1 ⟺ n=2ᵏ ⟺ logn=k
→ T(n) = T(1) + logn*c*n ∈ O(n*logn)

3.
¿?